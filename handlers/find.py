from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import (
    get_trips_by_date_category,
    get_trips_by_purpose,
    get_trips_by_companions,
    get_trips_by_location_keyword,
    get_random_trips,
    get_user_by_id
)
from keyboards.trip import get_trip_keyboard
from texts.trip import format_trip_card
from texts.trip import format_trip_card
from database import get_user_by_id
from keyboards.trip import get_trip_keyboard

router = Router()

@router.message(Command("find"))
async def show_find_menu(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", callback_data="filter:date")],
        [InlineKeyboardButton(text="üéØ –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–ª–∏", callback_data="filter:purpose")],
        [InlineKeyboardButton(text="üßç –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ø—É—Ç—á–∏–∫–∞–º", callback_data="filter:companions")],
        [InlineKeyboardButton(text="üåç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="filter:location")],
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏", callback_data="filter:random")]
    ])
    await message.answer("üîé –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
async def send_trip_card(trip: tuple, callback_or_message):
    (
        rowid, user_id, username, country, location,
        date_from, date_to, purpose, companions,
        description, insert_dttm
    ) = trip

    author = get_user_by_id(user_id)
    text = format_trip_card(trip, author)

    reply_markup = get_trip_keyboard(user_id, rowid, username)

    await callback_or_message.answer(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )

# –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
@router.callback_query(F.data == "filter:date")
async def show_date_options(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="filter:date:today")],
        [InlineKeyboardButton(text="üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="filter:date:tomorrow")],
        [InlineKeyboardButton(text="üóì –í—ã—Ö–æ–¥–Ω—ã–µ", callback_data="filter:date:weekend")],
        [InlineKeyboardButton(text="üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="filter:date:this_month")],
        [InlineKeyboardButton(text="üìÖ –°–ª–µ–¥. –º–µ—Å—è—Ü", callback_data="filter:date:next_month")],
        [InlineKeyboardButton(text="üìå –ì–∏–±–∫–∏–µ –¥–∞—Ç—ã", callback_data="filter:date:flexible")]
    ])
    await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("filter:date:"))
async def filter_by_date(callback: CallbackQuery):
    category = callback.data.split(":")[2]
    trips = get_trips_by_date_category(category)
    if not trips:
        await callback.message.edit_text("‚ùå –ü–æ–µ–∑–¥–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await callback.message.edit_text(f"üìÖ –ü–æ–µ–∑–¥–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É <b>{category}</b>:", parse_mode="HTML")
    for trip in trips[:3]:
        await send_trip_card(trip, callback.message)

# –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–∏
@router.callback_query(F.data == "filter:purpose")
async def show_purpose_options(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèñ –û—Ç–¥—ã—Ö", callback_data="filter:purpose:–æ—Ç–¥—ã—Ö")],
        [InlineKeyboardButton(text="üßó –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", callback_data="filter:purpose:–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è")],
        [InlineKeyboardButton(text="üöö –ü–µ—Ä–µ–µ–∑–¥", callback_data="filter:purpose:–ø–µ—Ä–µ–µ–∑–¥")],
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data="filter:purpose:—Ä–∞–±–æ—Ç–∞")]
    ])
    await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–µ–∑–¥–∫–∏:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("filter:purpose:"))
async def filter_by_purpose(callback: CallbackQuery):
    purpose = callback.data.split(":")[2]
    trips = get_trips_by_purpose(purpose)
    if not trips:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –ø–æ–µ–∑–¥–æ–∫ —Å —Ç–∞–∫–æ–π —Ü–µ–ª—å—é.")
        return
    await callback.message.edit_text(f"üéØ –¶–µ–ª—å: <b>{purpose}</b>", parse_mode="HTML")
    for trip in trips[:3]:
        await send_trip_card(trip, callback.message)

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ø—É—Ç—á–∏–∫–∞–º
@router.callback_query(F.data == "filter:companions")
async def show_companion_options(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üôã‚Äç‚ôÄÔ∏è –¢–æ–ª—å–∫–æ –¥–µ–≤—É—à–∫–∏", callback_data="filter:companions:—Ç–æ–ª—å–∫–æ –¥–µ–≤—É—à–∫–∏")],
        [InlineKeyboardButton(text="üë´ –ì—Ä—É–ø–ø–∞", callback_data="filter:companions:–≥—Ä—É–ø–ø–∞")],
        [InlineKeyboardButton(text="üë• 1‚Äì2 —á–µ–ª–æ–≤–µ–∫–∞", callback_data="filter:companions:1‚Äì2 —á–µ–ª–æ–≤–µ–∫–∞")],
        [InlineKeyboardButton(text="‚ùì –ù–µ –≤–∞–∂–Ω–æ", callback_data="filter:companions:–Ω–µ –≤–∞–∂–Ω–æ")]
    ])
    await callback.message.edit_text("üßç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("filter:companions:"))
async def filter_by_companions(callback: CallbackQuery):
    value = callback.data.split(":")[2]
    trips = get_trips_by_companions(value)
    if not trips:
        await callback.message.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É.")
        return
    await callback.message.edit_text(f"üßç –ü–æ–ø—É—Ç—á–∏–∫–∏: <b>{value}</b>", parse_mode="HTML")
    for trip in trips[:3]:
        await send_trip_card(trip, callback.message)

# –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
@router.callback_query(F.data == "filter:location")
async def show_location_options(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèî –°–æ—á–∏", callback_data="filter:location:–°–æ—á–∏")],
        [InlineKeyboardButton(text="üå¥ –ë–∞–ª–∏", callback_data="filter:location:–ë–∞–ª–∏")],
        [InlineKeyboardButton(text="üáπüá∑ –°—Ç–∞–º–±—É–ª", callback_data="filter:location:–°—Ç–∞–º–±—É–ª")],
        [InlineKeyboardButton(text="üáπüá≠ –ü—Ö—É–∫–µ—Ç", callback_data="filter:location:–ü—Ö—É–∫–µ—Ç")],
        [InlineKeyboardButton(text="‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="filter:location:manual")]
    ])
    await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=keyboard)

@router.callback_query(F.data == "filter:location:manual")
async def ask_for_location_input(callback: CallbackQuery):
    await callback.message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞—á–∏–Ω–∞—è —Å `!`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `!—Å–æ—á–∏`", parse_mode="Markdown")

@router.callback_query(F.data.startswith("filter:location:"))
async def filter_by_location(callback: CallbackQuery):
    location = callback.data.split(":")[2]
    trips = get_trips_by_location_keyword(location)
    if not trips:
        await callback.message.edit_text("‚ùå –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await callback.message.edit_text(f"üåç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{location}</b>", parse_mode="HTML")
    for trip in trips[:3]:
        await send_trip_card(trip, callback.message)

@router.message(F.text.startswith("!"))
async def find_by_location(message: Message):
    query = message.text[1:].strip()
    trips = get_trips_by_location_keyword(query)
    if not trips:
        await message.answer("‚ùå –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await message.answer(f"üåç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{query}</b>", parse_mode="HTML")
    for trip in trips[:3]:
        await send_trip_card(trip, message)

# –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
@router.callback_query(F.data == "filter:random")
async def show_random_trips(callback: CallbackQuery):
    trips = get_random_trips(limit=3)
    if not trips:
        await callback.message.edit_text("üì≠ –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await callback.message.edit_text("üé≤ –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫:")
    for trip in trips:
        await send_trip_card(trip, callback.message)
