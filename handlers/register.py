from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.register import FSMRegister
from database import save_user
from keyboards_main import get_menu_keyboard
from logger import get_logger

logger = get_logger(__name__)
router = Router()


@router.message(F.text == "/register")
async def register_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π Telegram:", reply_markup=kb)
    await state.set_state(FSMRegister.contact)


@router.message(F.contact)
async def save_contact(message: Message, state: FSMContext):
    contact = message.contact
    await state.update_data(
        telegram_id=contact.user_id,
        username=message.from_user.username,
        full_name=message.from_user.full_name,
        contact_phone=contact.phone_number
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞")],
            [KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
        )
    await message.answer("üß¨ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)
    await state.set_state(FSMRegister.gender)

@router.message(FSMRegister.gender)
async def get_gender(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1992):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FSMRegister.birth_year)


@router.message(FSMRegister.birth_year)
async def get_birth_year(message: Message, state: FSMContext):
    year = message.text.strip()
    if not year.isdigit() or not (1900 <= int(year) <= 2025):
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990).")
        return

    await state.update_data(birth_year=int(year))
    await message.answer("üåÜ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤—ë—Ç–µ?")
    await state.set_state(FSMRegister.city)


@router.message(FSMRegister.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–°–æ–ª–æ")], [KeyboardButton(text="–ì—Ä—É–ø–ø–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ —Å –≥—Ä—É–ø–ø–æ–π?", reply_markup=kb)
    await state.set_state(FSMRegister.traveler_type)


@router.message(FSMRegister.traveler_type)
async def get_traveler_type(message: Message, state: FSMContext):
    await state.update_data(traveler_type=message.text)
    await message.answer(
        "–ö–∞–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤–∞–º –±–ª–∏–∂–µ?\n\n–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—É–ª–∫–∏, —ç–∫—Å–∫—É—Ä—Å–∏–∏, —Ç—É—Å–æ–≤–∫–∏, –≥–∞—Å—Ç—Ä–æ—Ç—É—Ä—ã",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FSMRegister.interests)


@router.message(FSMRegister.interests)
async def get_interests(message: Message, state: FSMContext):
    await state.update_data(interests=[i.strip() for i in message.text.split(",")])
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")
    await state.set_state(FSMRegister.bio)


@router.message(FSMRegister.bio)
async def get_bio(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    data = await state.get_data()

    text = (
        f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∫–µ—Ç—É:</b>\n"
        f"üë§ –ò–º—è: <b>{data.get('full_name')}</b>\n"
        f"üß¨ –ü–æ–ª: <b>{data.get('gender')}</b>\n"
        f"üìÖ –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{data.get('birth_year')}</b>\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{data.get('contact_phone')}</b>\n"
        f"üèô –ì–æ—Ä–æ–¥: <b>{data.get('city')}</b>\n"
        f"üö∂ –¢–∏–ø: <b>{data.get('traveler_type')}</b>\n"
        f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: <b>{', '.join(data.get('interests', []))}</b>\n"
        f"üìù –û —Å–µ–±–µ: <b>{data.get('bio')}</b>\n\n"
        f"<b>‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ?</b>"
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(text, reply_markup=kb)
    await state.set_state(FSMRegister.confirm)


@router.message(FSMRegister.confirm, F.text.lower().in_(["‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–¥–∞", "yes"]))
async def confirm_registration(message: Message, state: FSMContext):
    data = await state.get_data()

    user_data = {
        "telegram_id": data.get("telegram_id"),
        "username": data.get("username"),
        "full_name": data.get("full_name"),
        "contact_phone": data.get("contact_phone"),
        "city": data.get("city"),
        "traveler_type": data.get("traveler_type"),
        "interests": data.get("interests", []),
        "bio": data.get("bio"),
        "gender": data.get("gender"),
        "birth_year": data.get("birth_year"),
    }

    save_user(user_data)

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n‚Äî ‚ûï —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø–æ–µ–∑–¥–∫—É\n‚Äî üîé –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n‚Äî üß≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–µ–∑–¥–∫–∏",
        reply_markup=get_menu_keyboard(message.from_user.id)
    )
    await state.clear()

@router.message(FSMRegister.confirm, F.text.lower().in_(["üîÅ –∏–∑–º–µ–Ω–∏—Ç—å", "–∏–∑–º–µ–Ω–∏—Ç—å", "–Ω–µ—Ç", "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å"]))
async def restart_registration(message: Message, state: FSMContext):
    await state.clear()
    await register_start(message, state)


@router.message(FSMRegister.confirm)
async def fallback_confirmation(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–î–∞'.")

