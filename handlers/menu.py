from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.utils.deep_linking import decode_payload

from handlers.create_trip import start_trip_creation
from handlers.mytrips import show_my_trips
from handlers.profile import show_profile
from handlers.register import register_start
from handlers.help import cmd_help
from handlers.notifications import notification_filter_keyboard

from keyboards.trip import get_search_filter_keyboard
from database import (
    is_user_registered,
    get_user_by_id,
    get_trips_by_user,
    get_trip_by_id,
    get_unread_notifications,
    count_unread_notifications
)
from texts.trip import format_trip_card, render_profile_template

from logger import get_logger

logger = get_logger(__name__)
router = Router()


# üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å—á—ë—Ç—á–∏–∫–æ–º
def get_menu_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    unread_count = count_unread_notifications(user_id)
    notif_label = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unread_count})" if unread_count > 0 else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É")],
            [KeyboardButton(text="üîé –ü–æ–∏—Å–∫"), KeyboardButton(text="üß≥ –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏")],
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text=notif_label)],
            [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )


# üöÄ /start —Å –¥–∏–ø–ª–∏–Ω–∫–æ–º
@router.message(CommandStart(deep_link=True))
async def handle_start_with_payload(message: Message, command: CommandObject):
    if command.args:
        payload = decode_payload(command.args)

        if payload.startswith("profile_"):
            user_id = payload.split("_")[1]
            user_data = get_user_by_id(user_id)
            if not user_data:
                await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            trips = get_trips_by_user(user_id)
            text = render_profile_template(user_data, trips)
            await message.answer(text, disable_web_page_preview=True)
            return

        elif payload.startswith("trip_"):
            trip_id = payload.split("_")[1]
            trip = get_trip_by_id(trip_id)
            if not trip:
                await message.answer("–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            author = get_user_by_id(trip[1])
            text = format_trip_card(trip, author, is_own=False)
            await message.answer(text, disable_web_page_preview=True)
            return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ ‚úàÔ∏è",
        reply_markup=get_menu_keyboard(message.from_user.id)
    )


# üß≠ /start –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
@router.message(CommandStart())
async def handle_plain_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ ‚úàÔ∏è",
        reply_markup=get_menu_keyboard(message.from_user.id)
    )


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É")
async def handle_create_button(message: Message, state: FSMContext):
    if not is_user_registered(message.from_user.id):
        await message.answer("‚ùóÔ∏è–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ù–∞–∂–º–∏ /register.")
        return
    await start_trip_creation(message, state)


@router.message(F.text == "üß≥ –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏")
async def handle_mytrips_button(message: Message):
    if not is_user_registered(message.from_user.id):
        await message.answer("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –ø–æ–µ–∑–¥–∫–∏.\n–ù–∞–∂–º–∏ /register.")
        return
    await show_my_trips(message)


@router.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def handle_find_button(message: Message):
    if not is_user_registered(message.from_user.id):
        await message.answer("‚ùóÔ∏è–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–ù–∞–∂–º–∏ /register.")
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=get_search_filter_keyboard()
    )


@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def handle_profile(message: Message, state: FSMContext):
    if not is_user_registered(message.from_user.id):
        await message.answer("‚ùóÔ∏è–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ù–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚¨áÔ∏è")
        await register_start(message, state)
        return
    await show_profile(message)


@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def goto_help(message: Message, state: FSMContext):
    await cmd_help(message)


# üì¨ –ü—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(F.text.startswith("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
async def show_notifications(message: Message):
    user_id = message.from_user.id
    notifications = get_unread_notifications(user_id)

    if not notifications:
        await message.answer(
            "üîï –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            reply_markup=notification_filter_keyboard()
        )
        return

    for notif in notifications:
        notif_id, notif_type, payload, created_at = notif

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"notif_read:{notif_id}")]
        ])

        await message.answer(
            f"üì¨ <b>{created_at[:16]}</b>\n\n{payload}",
            reply_markup=kb,
            parse_mode="HTML"
        )

    await message.answer("üîé –§–∏–ª—å—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=notification_filter_keyboard())
