# handlers/help.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command

from texts.help import (
    help_main,
    faq_categories,
    faq_category_general_questions,
    faq_category_general_answers,
    instructions_cards,
    instruction_end,
    feedback_choose_type,
    feedback_prompts,
    feedback_thanks,
    feedback_cancelled,
)
from keyboards.help import (
    help_kb,
    faq_categories_kb,
    faq_questions_kb,
    faq_answers_kb,
    instruction_main_kb,
    instruction_kb,
    feedback_type_kb,
    feedback_cancel_kb,
)
from config import ADMINS

router = Router()

async def _safe_edit(cb: CallbackQuery, text: str, markup):
    try:
        await cb.message.edit_text(text, reply_markup=markup, parse_mode="Markdown")
    except TelegramBadRequest:
        await cb.answer()
    else:
        await cb.answer()

# 1. /help –∏ –∫–Ω–æ–ø–∫–∞ ¬´üÜò –ü–æ–º–æ—â—å¬ª
@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(help_main, reply_markup=help_kb(), parse_mode="Markdown")

# 2. FAQ: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "help:faq")
async def _faq_categories(cb: CallbackQuery):
    await _safe_edit(cb, faq_categories, faq_categories_kb())

# 3. FAQ: –≤–æ–ø—Ä–æ—Å—ã
@router.callback_query(F.data.startswith("faq:category:"))
async def _faq_questions(cb: CallbackQuery):
    _, _, category = cb.data.split(":", 2)
    qs = faq_category_general_questions.get(category, [])
    text = "\n".join(f"‚Ä¢ {q}" for q in qs)
    await _safe_edit(cb, text, faq_questions_kb(category))

# 4. FAQ: –æ—Ç–≤–µ—Ç
@router.callback_query(F.data.startswith("faq:question:"))
async def _faq_answer(cb: CallbackQuery):
    _, _, category, idx = cb.data.split(":")
    idx = int(idx)
    question = faq_category_general_questions.get(category, [])[idx]
    answer = faq_category_general_answers.get(category, {}).get(question, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await _safe_edit(cb, answer, faq_answers_kb(category))

# 5. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "help:instr")
async def _instr_main(cb: CallbackQuery):
    await _safe_edit(cb, "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", instruction_main_kb())

# 6. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä
@router.callback_query(F.data.startswith("instr:"))
async def _instr_slide(cb: CallbackQuery):
    parts = cb.data.split(":")
    if len(parts) != 3:
        return await _safe_edit(cb, help_main, help_kb())

    _, topic, idx_str = parts
    try:
        idx = int(idx_str)
    except ValueError:
        return await _safe_edit(cb, help_main, help_kb())

    # –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    if topic in ("create", "join"):
        cards = instructions_cards
    elif topic == "view":
        cards = ["üìã *–ì–¥–µ –º–æ–∏ –ø–æ–µ–∑–¥–∫–∏?*\n–ù–∞–∂–º–∏—Ç–µ ¬´üß≥ –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏¬ª ‚Äî –∑–¥–µ—Å—å –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."]
    elif topic == "search":
        cards = ["üîç *–ö–∞–∫ –∏—Å–∫–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏?*\n–ù–∞–∂–º–∏—Ç–µ ¬´üîé –ü–æ–∏—Å–∫¬ª, –∑–∞–¥–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."]
    else:
        return await _safe_edit(cb, help_main, help_kb())

    # –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if idx < 0 or idx >= len(cards):
        return await _safe_edit(cb, instruction_end, help_kb())

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π–¥ –∫–∞–∫ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    if idx == len(cards) - 1:
        return await _safe_edit(cb, instruction_end, help_kb())

    slide = cards[idx]
    kb    = instruction_kb(topic, idx, len(cards))
    await _safe_edit(cb, slide, kb)

# 7. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –Ω–∞—á–∞–ª–æ
@router.callback_query(F.data == "help:feedback")
async def _fb_start(cb: CallbackQuery):
    await _safe_edit(cb, feedback_choose_type, feedback_type_kb())

# 8. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –≤—ã–±–æ—Ä —Ç–∏–ø–∞
@router.callback_query(F.data.startswith("fb:type:"))
async def _fb_type(cb: CallbackQuery):
    _, _, ftype = cb.data.split(":")
    prompt = feedback_prompts.get(ftype)
    if not prompt:
        return await cb.answer()
    await cb.message.edit_reply_markup(reply_markup=feedback_cancel_kb())
    await cb.message.answer(prompt, parse_mode="Markdown")

# 9. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: —Å–±–æ—Ä –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.message()
async def _fb_collect(message: Message):
    text_to_admins = f"üÜò [{message.text[:50]}] @{message.from_user.username}: {message.text}"
    for admin in ADMINS:
        try:
            await message.bot.send_message(admin, text_to_admins)
        except TelegramBadRequest:
            pass
    await message.answer(feedback_thanks, reply_markup=help_kb(), parse_mode="Markdown")

# 10. –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–º–æ–π¬ª
@router.callback_query(F.data == "help:menu")
async def _back_to_help(cb: CallbackQuery):
    await _safe_edit(cb, help_main, help_kb())


# –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
@router.callback_query(F.data == "fb:cancel")
async def _fb_cancel(cb: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª –≤ —Ñ–æ—Ä–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ—â–∏.
    """
    # analytics:event_logged(help_feedback_cancelled)
    await _safe_edit(cb, help_main, help_kb())
