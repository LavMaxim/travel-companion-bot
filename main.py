import asyncio
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from database import init_db
from handlers import (
    create_trip,
    cancel,
    admin,
    mytrips,
    find,
    join,
    menu,
    profile,
    register,
    fallback,
    help
)
from middlewares.error_handler import ErrorLoggingMiddleware
from middlewares.user_actions_logger import UserActionLoggerMiddleware

from logger import get_logger

logger = get_logger(__name__)

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env –∏–∑ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.critical("BOT_TOKEN is not set in environment variables")
    exit(1)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    logger.info("üß∞ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –°–æ–∑–¥–∞—ë–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    for router in (
        menu.router,
        create_trip.router,
        cancel.router,
        admin.router,
        mytrips.router,
        find.router,
        join.router,
        profile.router,
        register.router,
        help.router,
    ):
        dp.include_router(router)

    # –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ—Ç–±–∏–≤–∫—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    for router in (
        fallback.router,
    ):
        dp.include_router(router)

    # Middleware –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    dp.message.middleware(ErrorLoggingMiddleware())
    dp.callback_query.middleware(ErrorLoggingMiddleware())

    # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    dp.message.outer_middleware(UserActionLoggerMiddleware())
    dp.callback_query.outer_middleware(UserActionLoggerMiddleware())

    
    logger.info("üöÄ –°—Ç–∞—Ä—Ç polling")
    try:
        await dp.start_polling(bot)
    except Exception:
        logger.exception("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")


if __name__ == "__main__":
    asyncio.run(main())
